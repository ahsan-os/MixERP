@model string

@{
    ViewBag.Title = Model;
    Layout = ViewBag.Layout;
}
<link rel="stylesheet" type="text/css" href="/assets/css/backend.css" />
<link rel="stylesheet" href="/scripts/vakata-jstree/dist/themes/default/style.min.css" />

<style>
    .report.browser {
        display: flex;
        width: 100%;
    }

    .report .browser {
        width: 300px;
        padding: 1rem;
        overflow: auto;
        border-left: 1px solid #eee;
    }

    .report .report {
        width: calc(100% - 300px);
    }

    iframe {
        border: none;
        width: 100%;
        height: 100%;
    }

    .close.command {
        position: absolute;
        right: 1rem;
        top: 0.5rem;
    }
</style>
<script src="/i18n/resources.js?cultureCode=@CultureManager.GetCurrentUiCulture().Name"></script>
<script src="/assets/js/backend.js"></script>
<script src="/dashboard/my/template/contents/dashboard.js"></script>
<script src="/scripts/vakata-jstree/dist/jstree.min.js"></script>


<div class="report browser">
    <div class="report">
        <iframe id="ReportIFrame" seamless="seamless"></iframe>
    </div>
    <div class="browser">
        <div class="ui green header">
            <a class="close command" href="javascript:void(0);">
                <i class="grey remove icon"></i>
            </a>
            Frapid Report Browser
            <span class="sub header">@Model</span>
        </div>
        <div class="ui divider"></div>
        <div id="container" class="vpad8"></div>
    </div>
</div>

<script>
    (function () {
        const container = $("#container");

        function loadTree(model) {
            container.jstree({
                'core': {
                    'data': model
                }
            }).on("changed.jstree", function (e, data) {
                const parent = data.instance.get_node(data.instance.get_node(data.selected[0]).parent).original;
                const model = data.instance.get_node(data.selected[0]).original;
                const path = model.path;
                $("#ReportIFrame").attr("src", path);

                if (history.pushState) {
                    const newurl = window.location.protocol + "//" + window.location.host + window.location.pathname + '?file=' + path;
                    window.history.pushState({ path: newurl }, '', newurl);
                }
            }).on("loaded.jstree", function (e, data) {
                const instance = $(container).jstree(true);
                if (!instance || !instance._model) {
                    return;
                }

                for (let i in instance._model.data) {
                    if (instance._model.data.hasOwnProperty(i)) {
                        if (i === "#") {
                            continue;
                        };

                        if (instance._model.data[i].parents.length < 4) {
                            instance._open_to(i);
                        };
                    };
                };
            });
        };

        function getData() {
            function request() {
                const url = document.location.href;
                return window.getAjaxRequest(url, "POST");
            };

            const ajax = request();
            ajax.success(function (response) {
                loadTree(response);
            });

            ajax.fail(function (xhr) {
                window.logAjaxErrorMessage(xhr);
            });
        };

        getData();
    })();

    $(".report.browser .close.command").off("click").on("click", function () {
        const source = $("#ReportIFrame").attr("src") || "/dashboard";
        window.location = source;
    });

    var angularScopes = $(".ng-scope").length;
    if (angularScopes) {
        window.top.location.reload();
    };

    (function () {
        const path = window.getQueryStringByName("file");
        if (path) {
            $("#ReportIFrame").attr("src", path);
        };
    })();
</script>